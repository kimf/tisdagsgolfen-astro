---
import AppScreen from 'src/layouts/AppScreen.astro';
import getDb from 'src/db';
import CourseStats from 'src/components/stats/CourseStats.astro';

const db = getDb(Astro.locals);

const scoringSessions = await db.query.scoringSessions.findMany({
  where: (scoringSessions, { eq }) => eq(scoringSessions.special, false),
  with: {
    scorecards: {
      orderBy: (scorecards, { asc }) => [asc(scorecards.id)],
      with: {
        scores: {
          orderBy: (scores, { asc }) => [asc(scores.hole)]
        }
      }
    }
  }
});

const dbCourses = await db.query.courses.findMany({
  where: (courses, { eq }) => eq(courses.finalCourse, false),
  with: {
    holes: true
  }
});

const sjoBerg = dbCourses.find((c) => c.id === 1010); // Sjö-Berg
const bergDal = dbCourses.find((c) => c.id === 1006); // Berg-Dal
const dalSjo = dbCourses.find((c) => c.id === 1008); // Dal-Sjö

let sjoHoleIds: number[] = [];
let bergHoleIds: number[] = [];
let dalHoleIds: number[] = [];

if (sjoBerg && dalSjo && bergDal && sjoBerg.holes && dalSjo.holes && bergDal.holes) {
  sjoHoleIds = [
    ...sjoBerg.holes.filter((h) => h.number < 10).map((h) => h.id),
    ...dalSjo.holes.filter((h) => h.number > 9).map((h) => h.id)
  ];

  dalHoleIds = [
    ...dalSjo.holes.filter((h) => h.number < 10).map((h) => h.id),
    ...bergDal.holes.filter((h) => h.number > 9).map((h) => h.id)
  ];

  bergHoleIds = [
    ...bergDal.holes.filter((h) => h.number < 10).map((h) => h.id),
    ...sjoBerg.holes.filter((h) => h.number > 9).map((h) => h.id)
  ];
}

type ScoreWithMeta = {
  holeId: number;
  holeNumber: number;
  par: number;
  toPar: number;
  holeHcp: number;
  strokes: number;
  beers: number;
  ciders: number;
  fines: number;
};

const scores: ScoreWithMeta[] =
  scoringSessions
    .map((sc) => {
      const course = dbCourses.find((c) => c.id === sc.courseId);
      if (!course) {
        return [];
      }

      return sc.scorecards
        .flatMap((s) => s.scores)
        .filter((s) => s.strokes !== 0)
        .map((s) => {
          const hole = course.holes.find((h) => h.number === s.hole);
          if (!hole) {
            throw new Error('Kunde inte hitta hål ' + s.hole + ' för bana ' + course.name);
          }
          return {
            strokes: s.strokes,
            holeId: hole.id,
            holeNumber: hole.number,
            holeHcp: hole.hcp,
            par: hole.par,
            toPar: s.strokes - hole.par,
            beers: s.beers,
            ciders: s.ciders,
            fines: s.fines
          };
        });
    })
    .flat() || [];

const sjoScores = scores.filter((s) => sjoHoleIds.includes(s.holeId));
const bergScores = scores.filter((s) => bergHoleIds.includes(s.holeId));
const dalScores = scores.filter((s) => dalHoleIds.includes(s.holeId));
---

<AppScreen title="Statistik" back="/">
  <main class="p-4">
    <section class="mb-4">
      <h2>Snitt</h2>
      <div class="flex flex-col gap-4 mb-4 md:flex-row flex-wrap">
        <CourseStats course="Sjö" scores={sjoScores} />
        <CourseStats course="Berg" scores={bergScores} />
        <CourseStats course="Dal" scores={dalScores} />
      </div>
    </section>
  </main>
</AppScreen>
