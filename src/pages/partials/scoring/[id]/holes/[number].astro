---
import ScoreForm from 'src/components/scoring/ScoreForm.astro';
import ScoreRow from 'src/components/scoring/ScoreRow.astro';
import EventPillRow from 'src/components/shared/EventPillRow.astro';
import Button from 'src/components/ui/button.astro';
import { updateCurrentHole } from 'src/db/mutations/updateCurrentHole';
import { getScoringSession } from 'src/db/queries/getScoringSession';

export const partial = true;

const { id, number } = Astro.params;
if (!id) throw new Error('Id saknas fÃ¶r runda');

const scoringSession = await getScoringSession(parseInt(id, 10));

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}
let currentHoleNr = scoringSession.currentHole || 1;
if (number) {
  const holeNumber = parseInt(number, 10);
  if (holeNumber !== scoringSession.currentHole) {
    currentHoleNr = holeNumber;
    await updateCurrentHole(scoringSession.id, holeNumber);
  }
}

const currentHole = scoringSession.course.holes.find((h) => h.number === currentHoleNr);
if (!currentHole) {
  throw new Error('Fel hÃ¥l!');
}
const holesCount = scoringSession.course.holesCount;
---

<div class="p-4" hx-swap-oob="false">
  <div class="flex items-center justify-between">
    <h2 class="mb-2">
      {
        new Date(scoringSession.createdAt || '').toLocaleDateString('sv-SE', {
          day: 'numeric',
          month: 'short'
        })
      } -
      {scoringSession.course.name}
    </h2>

    <EventPillRow
      special={!!scoringSession.special}
      strokes={!!scoringSession.strokes}
      teamEvent={!!scoringSession.teamEvent}
    />
  </div>
</div>

<div class="flex w-full" id="scoringbox">
  <div class="m-2 w-full">
    <header class="flex justify-between items-center p-4 rounded-t-lg">
      <small>PAR {currentHole.par}</small>
      <h1>HÃ…L {currentHole.number}</h1>
      <small>INDEX {currentHole.index}</small>
    </header>
    <div x-data="scoring" class="rounded-lg border shadow-xl relative">
      <table class="w-full text-sm text-left text-gray-600 dark:text-gray-300">
        <thead class="w-full uppercase bg-cyan-950 dark:bg-cyan-950/50 text-white">
          <tr>
            <th class="p-2 pl-4 text-left vcr w-[36%]">Spelare</th>
            <th class={`p-2 text-center vcr ${scoringSession.strokes ? 'font-bold' : ''}`}>Slag</th>
            <th class="p-2 text-center vcr">Puttar</th>
            {!scoringSession.special && <th class="p-2 text-center vcr">ðŸ’¸</th>}
            <th class={`p-2 text-center vcr ${scoringSession.strokes ? '' : 'font-bold'}`}>PoÃ¤ng</th
            >
          </tr>
        </thead>
        <tbody id="tbody">
          {
            scoringSession.scorecards.map((scorecard) => (
              <ScoreRow hole={currentHole} scorecard={scorecard} holesCount={holesCount} />
            ))
          }
        </tbody>
      </table>
      <ScoreForm special={!!scoringSession.special} id={scoringSession.id} />
    </div>
    <footer class="flex justify-between bg-cyan-100 dark:bg-black p-4 w-full rounded-b-lg">
      {
        currentHoleNr > 1 && (
          <Button
            intent="link"
            size="sm"
            hx-get={`/partials/scoring/${id}/holes/${currentHoleNr - 1}`}
            hx-target="#scoringbox"
            hx-swap="outerHTML transition:true"
          >
            ðŸ‘ˆ HÃ¥l {currentHoleNr - 1}
          </Button>
        )
      }
      {
        currentHoleNr < holesCount && (
          <Button
            intent="link"
            size="sm"
            class="ml-auto"
            hx-get={`/partials/scoring/${id}/holes/${currentHoleNr + 1}`}
            hx-target="#scoringbox"
            hx-swap="outerHTML transition:true"
          >
            HÃ¥l {currentHoleNr + 1} ðŸ‘‰
          </Button>
        )
      }
    </footer>
  </div>
</div>
