---
export const partial = true;

import {
  getLeaderboardForScoringSession,
  getScoringSession
} from 'src/db/queries/getScoringSession';
import EventPillRow from 'src/components/shared/EventPillRow.astro';
import standardCompRank from 'src/lib/standardCompRank';
import { shortName } from 'src/lib/formatters';
import Beers from 'src/components/shared/Beers.astro';
import Ciders from 'src/components/shared/Ciders.astro';
import ToPar from 'src/components/shared/ToPar.astro';
import Button from 'src/components/ui/button.astro';
import HoleInfo from 'src/components/leaderboard/HoleInfo.astro';
import HoleNumberHeader from 'src/components/leaderboard/HoleNumberHeader.astro';
import ScoreCardDetailsStrokesRow from 'src/components/leaderboard/ScoreCardDetailsStrokesRow.astro';
import ScorecarDetailRow from 'src/components/leaderboard/ScorecarDetailRow.astro';
import getDb from 'src/db';
import Pill from 'src/components/ui/Pill.astro';

const { id } = Astro.params;
const userId = await Astro.session?.get('userId');
if (!id) throw new Error('Id saknas fÃ¶r runda');

const db = getDb(Astro.locals);

const scoringSession = await getScoringSession(Number(id), db);

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}

const leaderboards = await getLeaderboardForScoringSession(scoringSession, db);

if (leaderboards.length === 0) {
  throw new Error('Hittade ingen data att visa');
}

const scorecards = leaderboards.flatMap((session) => session.scorecards);

const rankedScorecards = scoringSession.strokes
  ? standardCompRank(scorecards, 'toPar', true, null)
  : standardCompRank(
      scorecards.map((s) => ({ ...s, toPar: (s.through ?? 0) * 2 - (s.points ?? 0) })),
      'toPar',
      true,
      null
    );

const canCloseWeek =
  userId === '2'
    ? leaderboards.every((l) => l.state === 'PENDING') &&
      scorecards.every((s) => s.through === scoringSession.course.holesCount)
    : false;

// Astro.response.headers.set('HX-Trigger', 'score-updated');

const strokes = scoringSession.strokes;

const holes = scoringSession.course.holes.sort((a, b) => a.number - b.number);
const firstNineHoles = holes.filter((h) => h.number <= 9);
const secondNineHoles = holes.filter((h) => h.number > 9);
---

<main class="p-4">
  <div class="flex items-center justify-between">
    <h3 class="mb-2">
      {
        new Date(scoringSession.createdAt || '').toLocaleDateString('sv-SE', {
          day: 'numeric',
          month: 'short'
        })
      } -
      {scoringSession.course.name}
    </h3>

    <EventPillRow
      special={!!scoringSession.special}
      strokes={!!scoringSession.strokes}
      teamEvent={!!scoringSession.teamEvent}
      live
    />
  </div>

  <table class="w-full text-left text-slate-700 mt-4" x-data={`{scorecardId: null}`}>
    <thead class="uppercase bg-stone-800 text-white">
      <tr>
        <th class="p-2 text-center vcr">#</th>
        <th class="p-2 vcr">Spelare</th>
        {!scoringSession.special && <th class="p-2 text-center vcr">ðŸ’¸</th>}
        <th class="p-2 text-center vcr">HÃ¥l</th>
        <th class="p-2 text-center vcr">Slag</th>
        {!strokes && <th class="p-2 text-center vcr">PoÃ¤ng</th>}
        <th class="p-2 text-center vcr">+/-</th>
      </tr>
    </thead>
    <tbody x-auto-animate.linear>
      {
        rankedScorecards.map((scorecard) => (
          <>
            <tr
              class="border-b border-gray-200 odd:bg-white even:bg-gray-50"
              @click={`scorecardId === ${scorecard.id} ? scorecardId = null : scorecardId = ${scorecard.id}`}
            >
              <td class="p-2 text-center vcr">{scorecard.rank}</td>
              <td class="p-2 flex flex-col vcr uppercase">
                {scorecard.players.map((p) => (
                  <div class="text-black font-bold flex gap-2">
                    <div class="flex items-center">
                      {shortName(p.player.fullName)}
                      {p.player.guest && (
                        <Pill intent="guest" class="h-4 px-1 py-0 ml-2">
                          GÃ„ST
                        </Pill>
                      )}
                    </div>
                    <Beers beers={p.beers || 0} />
                    <Ciders ciders={p.ciders || 0} />
                  </div>
                ))}
                <small>{scorecard.givenStrokes} Slag</small>
              </td>
              {!scoringSession.special && (
                <td class="p-2 text-center vcr">
                  {scorecard.players.reduce((a, b) => a + (b.fines ?? 0), 0)}
                </td>
              )}
              <td class="p-2 text-center vcr">{scorecard.through}</td>
              <td class="p-2 text-center vcr">{scorecard.strokes}</td>
              {!strokes && (
                <td class="p-2 text-center vcr text-black font-bold">{scorecard.points}</td>
              )}
              <td class="p-2 font-extrabold text-center vcr">
                <ToPar toPar={scorecard.toPar || 0} />
              </td>
            </tr>
            <tr class="bg-slate-100 w-full" x-show={`scorecardId == ${scorecard.id}`} x-cloak>
              <td colspan="7" class="w-full overflow-x-scroll pb-8">
                <table class="w-full text-left text-slate-700 text-xs bg-white p-1">
                  <tbody class="uppercase bg-white text-slate-500 text-xs align-bottom">
                    <HoleNumberHeader holes={firstNineHoles} />
                    <HoleInfo holes={firstNineHoles} />
                    <ScoreCardDetailsStrokesRow
                      scorecard={scorecard}
                      course={scoringSession.course}
                      firstNine
                    />
                    <ScorecarDetailRow
                      holes={firstNineHoles}
                      scorecard={scorecard}
                      strokes
                      firstNine
                    />
                    <ScorecarDetailRow holes={firstNineHoles} scorecard={scorecard} firstNine />

                    <tr>
                      <td colspan="10" class="p-1 bg-slate-300" />
                    </tr>

                    <HoleNumberHeader holes={secondNineHoles} />
                    <HoleInfo holes={secondNineHoles} />
                    <ScoreCardDetailsStrokesRow
                      course={scoringSession.course}
                      scorecard={scorecard}
                    />
                    <ScorecarDetailRow holes={secondNineHoles} strokes scorecard={scorecard} />
                    <ScorecarDetailRow holes={secondNineHoles} scorecard={scorecard} />
                  </tbody>
                </table>
              </td>
            </tr>
          </>
        ))
      }
    </tbody>
  </table>

  {
    canCloseWeek && (
      <div class="mt-40">
        <Button
          size="sm"
          intent="destructive"
          hx-post={`/scoring/${id}/close`}
          hx-confirm="Helt sÃ¤ker?"
        >
          KIM - STÃ„NG RUNDA
        </Button>
      </div>
    )
  }
</main>
