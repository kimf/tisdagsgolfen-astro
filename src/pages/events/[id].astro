---
export const prerender = true;

import EventPillRow from 'src/components/shared/EventPillRow.astro';
import { shortName } from 'src/lib/formatters';
import AppScreen from 'src/layouts/AppScreen.astro';
import { getEventWithLeaderboardData } from 'src/db/queries/getEvents';
import standardCompRank from 'src/lib/standardCompRank';
import type { LeaderboardScorecard } from 'src/db/queries/getScoringSession';
import Beers from 'src/components/shared/Beers.astro';
import Ciders from 'src/components/shared/Ciders.astro';
import ToPar from 'src/components/shared/ToPar.astro';
import getDb from 'src/db';
import type { GetStaticPaths, InferGetStaticParamsType } from 'astro';

const db = getDb(Astro.locals);

export const getStaticPaths = (async () => {
  // const events = await db.query.events.findMany();
  const events: any[] = [];
  return events?.map((ev) => ({ params: { id: ev.id } })) ?? [];
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { id } = Astro.params as Params;
if (!id) throw new Error('Id saknas fÃ¶r runda');

const event = await getEventWithLeaderboardData(Number(id), db);

if (!event) {
  throw new Error('Hittade ingen runda');
}

const date =
  event.createdAt &&
  new Date(event.createdAt).toLocaleDateString('sv-SE', {
    month: 'long',
    day: 'numeric'
  });

const title = `${date} - ${event.course.name}`;

const scorecards = event.eventSessions.flatMap((es) => es.session.scorecards);
const rankedScorecards = standardCompRank(
  scorecards as LeaderboardScorecard[],
  'weekPoints',
  false,
  null
);

Astro.response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=3600');
---

<AppScreen title="VECKORESULTAT" back="/">
  <div class="flex flex-col gap-6 p-4 pt-0">
    <table class="w-full text-left text-slate-700">
      <thead class="uppercase bg-stone-800 text-white">
        <th class="p-2 text-center vcr">#</th>
        <th class="p-2 vcr">Spelare</th>
        <th class="p-2 text-center vcr">SLAG</th>
        <th class="p-2 text-center vcr">POÃ„NG</th>
        <th class="p-2 text-center vcr">+/-</th>
        {!event.special && <th class="p-2 text-center vcr">ðŸ’¸</th>}
        <th class="p-2 text-center vcr">P</th>
      </thead>
      <tbody>
        {
          rankedScorecards.map((scorecard) => (
            <tr class="border-b border-gray-200 odd:bg-white even:bg-gray-50">
              <td class="p-2 text-center vcr">{scorecard.rank}</td>
              <td class="px-2 py-1 flex flex-col vcr uppercase">
                {scorecard.players.map((p) => (
                  <div class="font-bold text-black">
                    {shortName(p.player.fullName)}
                    <div class="text-xs">
                      <Beers beers={p.beers || 0} />
                      <Ciders ciders={p.ciders || 0} />
                    </div>
                  </div>
                ))}
              </td>
              <td class="p-2 text-center vcr">{scorecard.strokes}</td>
              <td class="p-2 text-center vcr">{scorecard.points}</td>
              <td class="p-2 font-bold text-center vcr">
                <ToPar toPar={scorecard.toPar || 0} />
              </td>
              {!event.special && (
                <td class="p-2 text-center vcr">
                  {scorecard.players.reduce((a, b) => a + (b.fines ?? 0), 0)}
                </td>
              )}
              <td class="p-2 text-center vcr font-extrabold text-black">{scorecard.weekPoints}</td>
            </tr>
          ))
        }
      </tbody>
    </table>

    <div class="flex items-center justify-between">
      <h2 class="mb-2">{title}</h2>
      <EventPillRow
        special={!!event.special}
        strokes={!!event.strokes}
        teamEvent={!!event.teamEvent}
      />
    </div>
  </div>
</AppScreen>
