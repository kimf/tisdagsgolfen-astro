---
export const prerender = false;
import 'src/styles/scoring.css';

import { asc, eq } from 'drizzle-orm';
import db from 'src/db';
import AppScreen from 'src/layouts/AppScreen.astro';
import { scorecards, scoringSessions, holes } from 'src/db/schema';
import { shortName } from 'src/utils/formatters';
import TableHead from 'src/components/scoring/TableHead.astro';
import type { ScorecardWithPlayers } from 'src/db/schema/scorecard';

const { id } = Astro.params;
const userId = await Astro.session?.get('userId');

if (!userId) throw new Error('Logga in för att föra score');
if (!id) throw new Error('Id saknas för runda');

// // Handle POST from htmx for updating a score
// if (Astro.request.method === 'POST') {
//   const formData = await Astro.request.formData();
//   const playerId = Number(formData.get('playerId'));
//   const hole = Number(formData.get('hole'));
//   const strokesValue = Number(formData.get('strokes'));
//   const sessionId = Number(id);

//   // Upsert logic for strokes (adjust to your schema)
//   await db
//     .insert(strokes)
//     .values({ playerId, hole, strokes: strokesValue, sessionId })
//     .onConflictDoUpdate({
//       target: [strokes.playerId, strokes.hole, strokes.sessionId],
//       set: { strokes: strokesValue }
//     });

//   // Fetch updated total and cell value
//   const total = await db.query.strokes
//     .findMany({
//       where: eq(strokes.playerId, playerId),
//       columns: { strokes: true }
//     })
//     .then((rows) => rows.reduce((sum, r) => sum + r.strokes, 0));

//   // Return the updated cell and total for htmx swap
//   return new Response(`<span>${strokesValue}</span>|<span>${total}</span>`, {
//     headers: { 'HX-Trigger': 'score-updated' }
//   });
// }

// Fetch session, players, holes, and scores
const scoringSession = await db.query.scoringSessions.findFirst({
  where: eq(scoringSessions.id, Number(id)),
  with: {
    course: {
      with: {
        holes: {
          orderBy: [asc(holes.number)]
        }
      }
    },
    scorecards: {
      orderBy: [asc(scorecards.id)],
      with: {
        players: { with: { player: true } }
      }
    }
  }
});

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}

// Build players and holes arrays

const course = scoringSession.course;
const holesCount = course.holes.length;
const currentHole = course.holes.find((hole) => hole.number === scoringSession.currentHole);
---

<AppScreen title="För score">
  <div x-data="scorecardApp()" x-init="init()">
    <table class="scorecard">
      <TableHead scorecards={scoringSession.scorecards as ScorecardWithPlayers[]} />
      <tbody>
        {
          course.holes.map((hole) => (
            <tr>
              <td>{hole.number}</td>
              {scoringSession.scorecards.map((scorecard) => (
                <td>
                  <button
                    class="score-cell"
                    x-on:click="openDrawer({playerId: {player.id}, playerName: '{player.name}', hole: {hole}, value: '{getScore(player.id, hole)}'})"
                    x-bind="scoreCellAttrs({playerId: {player.id}, hole: {hole}})"
                    hx-get="#"
                  >
                    <span x-text="getCell({playerId: {player.id}, hole: {hole}})">TBD</span>
                  </button>
                </td>
              ))}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</AppScreen>
<script src="src/controllers/ScoringController.ts"></script>
