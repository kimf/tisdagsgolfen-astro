---
import { getScoringSession } from 'src/db/queries/getScoringSession';
import { updateScoringSession } from 'src/db/mutations/updateScoringSession';
import { shortName } from 'src/lib/formatters';
import AppScreen from 'src/layouts/AppScreen.astro';
import Button from 'src/components/ui/button.astro';
import Quantity from 'src/components/ui/quantity.astro';
import getDb from 'src/db';

const { id } = Astro.params;
const userId = Astro.cookies.get('userId')?.value || undefined;

if (!userId) throw new Error('Logga in för att föra score');
if (!id) throw new Error('Id saknas för runda');

const db = getDb(Astro.locals);

const scoringSession = await getScoringSession(parseInt(id, 10), db);

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}

console.log(Astro.request.method);

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const userId = Astro.cookies.get('userId')?.value || undefined;

  if (!userId) {
    throw new Error('Logga in för att ändra runda');
  }
  if (scoringSession.ownerId !== Number(userId)) {
    throw new Error('Du kan bara ändra din egen runda');
  }

  await updateScoringSession(Number(id), formData, db);
  return Astro.redirect(`/scoring/${id}`);
}
---

<AppScreen title="Ändra runda" back={`/scoring/${id}`}>
  <div class="p-4">
    <form method="POST">
      {
        scoringSession.scorecards.map((scorecard, index) => (
          <div class="flex gap-2 p-4 border-b mb-2">
            <h3>
              {scorecard.players.map((player) => shortName(player.player.fullName)).join(', ')}
            </h3>
            <div class="ml-auto">
              <Quantity
                value={scorecard.givenStrokes || 0}
                name={`scorecards[${scorecard.id}]['strokes']`}
              />
            </div>
          </div>
        ))
      }
      <Button class="mt-8" type="submit" size="block">SPARA</Button>
    </form>
  </div>
</AppScreen>
