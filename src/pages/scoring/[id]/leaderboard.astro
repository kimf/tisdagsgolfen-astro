---
// export const partial = true;
import {
  getMinimalScoringSession,
  getLeaderboardForScoringSession
} from 'src/db/queries/getScoringSession';
import AppScreen from 'src/layouts/AppScreen.astro';
import Loader from 'src/assets/images/grid.svg';
import EventPillRow from 'src/components/shared/EventPillRow.astro';
import standardCompRank from 'src/lib/standardCompRank';
import { shortName } from 'src/lib/formatters';
import Beers from 'src/components/shared/Beers.astro';
import Ciders from 'src/components/shared/Ciders.astro';
import ToPar from 'src/components/shared/ToPar.astro';
import Button from 'src/components/ui/button.astro';

const { id } = Astro.params;
const userId = await Astro.session?.get('userId');

if (!id) throw new Error('Id saknas fÃ¶r runda');

const scoringSession = await getMinimalScoringSession(Number(id));

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}

const leaderboards = await getLeaderboardForScoringSession(scoringSession);

if (leaderboards.length === 0) {
  throw new Error('Hittade ingen data att visa');
}

const scorecards = leaderboards.flatMap((session) => session.scorecards);

const rankedScorecards = scoringSession.strokes
  ? standardCompRank(scorecards, 'toPar', false, null)
  : standardCompRank(
      scorecards.map((s) => ({ ...s, toPar: (s.through ?? 0) * 2 - (s.points ?? 0) })),
      'toPar',
      true,
      null
    );

// Astro.response.headers.set('HX-Trigger', 'score-updated');
---

<AppScreen title="Ledartavla">
  <div hx-get={`/scoring/${id}/leaderboard`} hx-trigger="every 3s" hx-swap="outerHTML">
    <main class="max-w-3xl p-4 pb-12">
      <div class="flex items-center justify-between">
        <h2 class="mb-2">
          {
            new Date(scoringSession.createdAt || '').toLocaleDateString('sv-SE', {
              day: 'numeric',
              month: 'short'
            })
          } -
          {scoringSession.course.name}
        </h2>

        <EventPillRow
          special={!!scoringSession.special}
          strokes={!!scoringSession.strokes}
          teamEvent={!!scoringSession.teamEvent}
        />
      </div>

      <div>
        <table class="w-full text-sm text-left text-gray-600 dark:text-gray-300">
          <thead class="text-xs uppercase">
            <tr>
              <th class="p-2 text-center vcr">#</th>
              <th class="p-2 vcr">Spelare</th>
              {!scoringSession.special && <th class="p-2 text-center vcr">ðŸ’¸</th>}
              <th class="p-2 text-center vcr">HÃ¥l</th>
              <th class="p-2 text-center vcr">Slag</th>
              <th class="p-2 text-center vcr">PoÃ¤ng</th>
              <th class="p-2 text-center vcr">+/-</th>
            </tr>
          </thead>
          <tbody>
            {
              rankedScorecards.map((scorecard) => (
                <tr class="border-b border-gray-200 odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 dark:border-gray-700">
                  <td class="p-2 text-center vcr">{scorecard.rank}</td>
                  <td class="p-2 text-xs">
                    {scorecard.players.map((p) => (
                      <div>
                        {shortName(p.player.fullName)}
                        <Beers beers={p.beers || 0} />
                        <Ciders ciders={p.ciders || 0} />
                      </div>
                    ))}
                    <small>{scorecard.givenStrokes} Slag</small>
                  </td>
                  {!scoringSession.special && (
                    <td class="p-2 text-center vcr">
                      {scorecard.players.reduce((a, b) => a + (b.fines ?? 0), 0)}
                    </td>
                  )}
                  <td class="p-2 text-center vcr">{scorecard.through}</td>
                  <td class="p-2 text-center vcr">{scorecard.strokes}</td>
                  <td class="p-2 text-center vcr">{scorecard.points}</td>
                  <td class="p-2 font-bold text-center vcr">
                    <ToPar toPar={scorecard.toPar || 0} />
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </main>
    <footer
      class="fixed max-w-screen-lg p-1 mx-auto bottom-1 left-1 bg-background/75 backdrop-blur-xs"
    >
      <Button intent="link">
        {
          userId && scoringSession.ownerId === Number(userId) ? (
            <a href={`/scoring/${id}`}>&larr; TILLBAKA</a>
          ) : (
            <a href={`/`}>&larr; TILLBAKA</a>
          )
        }
      </Button>
      <Loader class="htmx-indicator" width="20" height="20" />
    </footer>
  </div>
</AppScreen>
