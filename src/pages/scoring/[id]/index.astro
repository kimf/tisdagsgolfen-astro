---
import 'src/styles/embla.css';
import ScoreForm from 'src/components/scoring/ScoreForm.astro';
import ScoreRow from 'src/components/scoring/ScoreRow.astro';
import EventPillRow from 'src/components/shared/EventPillRow.astro';
import { updateCurrentHole } from 'src/db/mutations/updateCurrentHole';
import { getScoringSession } from 'src/db/queries/getScoringSession';
import { deleteScoringSession } from 'src/db/mutations/deleteScoringSession';
import { shortName } from 'src/lib/formatters';
import AppScreen from 'src/layouts/AppScreen.astro';
import Button from 'src/components/ui/button.astro';
import getDb from 'src/db';

const { id, number } = Astro.params;
const userId = Astro.cookies.get('userId')?.value || undefined;

if (!userId) throw new Error('Logga in fÃ¶r att fÃ¶ra score');
if (!id) throw new Error('Id saknas fÃ¶r runda');

const db = getDb(Astro.locals);

const scoringSession = await getScoringSession(parseInt(id, 10), db);

if (!scoringSession) {
  throw new Error('Hittade ingen scoring session');
}

if (Astro.request.method === 'DELETE') {
  await deleteScoringSession(Number(id), db);

  return new Response(null, {
    status: 204,
    statusText: 'No Content',
    headers: {
      'HX-Redirect': '/'
    }
  });
}

let currentHoleNr = scoringSession.currentHole || 1;
if (number) {
  const holeNumber = parseInt(number, 10);
  if (holeNumber !== scoringSession.currentHole) {
    currentHoleNr = holeNumber;
    await updateCurrentHole(scoringSession.id, holeNumber, db);
  }
}

const currentHole = scoringSession.course.holes.find((h) => h.number === currentHoleNr);
if (!currentHole) {
  throw new Error('Fel hÃ¥l :)');
}
const holesCount = scoringSession.course.holesCount;

const title = `${new Date(scoringSession.createdAt || '').toLocaleDateString('sv-SE', {
  day: 'numeric',
  month: 'short'
})} - ${scoringSession.course.name}`;

const scorecards =
  scoringSession.eventType === 'team_w_individual'
    ? scoringSession.scorecards.filter((s) => s.individualForTeamWIndividual)
    : scoringSession.scorecards;

const players = scorecards
  .flatMap((s) => s.players)
  .filter((player, index, self) => index === self.findIndex((p) => p.id === player.id));
---

<AppScreen title={title}>
  <div slot="header">
    <EventPillRow
      special={!!scoringSession.special}
      eventType={scoringSession.eventType}
      scoringType={scoringSession.scoringType}
    />
  </div>

  <div x-data={`scoring(${currentHole?.number - 1}, ${id})`}>
    <div class="embla">
      <div x-ref="viewport" class="embla__viewport">
        <div class="embla__container h-screen">
          {
            scoringSession.course.holes.map((hole) => (
              <div class="embla__slide" id={`hole_${hole.id}`}>
                <div class="embla__slide__inner p-4">
                  <header class="flex justify-between items-center pt-4 pb-6 text-xl">
                    <small>PAR {hole.par}</small>
                    <h1 class="text-3xl">HÃ…L {hole.number}</h1>
                    <small>HCP {hole.hcp}</small>
                  </header>
                  <div class="rounded-lg border relative">
                    <table class="w-full text-sm text-left">
                      <thead class="w-full uppercase bg-cyan-950 text-white">
                        <tr>
                          <th class="p-2 pl-4 text-left vcr w-[36%] rounded-tl-md">Spelare</th>
                          <th
                            class={`p-2 text-center vcr ${scoringSession.scoringType === 'strokes' ? 'font-bold' : ''}`}
                          >
                            Slag
                          </th>
                          {!scoringSession.special && <th class="p-2 text-center vcr">Puttar</th>}
                          {!scoringSession.special && <th class="p-2 text-center vcr">ðŸ’¸</th>}
                          {scoringSession.scoringType !== 'strokes' && (
                            <th class="p-2 text-center vcr rounded-tr-md">PoÃ¤ng</th>
                          )}
                        </tr>
                      </thead>
                      <tbody id="tbody">
                        {scorecards.map((scorecard) => (
                          <ScoreRow
                            scorecardId={scorecard.id}
                            holesCount={holesCount}
                            givenStrokes={scorecard.givenStrokes || 0}
                            name={scorecard.players
                              .map((player) => shortName(player.player.fullName))
                              .join(', ')}
                            hole={hole}
                            score={scorecard.scores.find((s) => s.hole === hole.number)}
                            special={!!scoringSession.special}
                            strokes={scoringSession.scoringType === 'strokes'}
                          />
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
      <ScoreForm
        special={!!scoringSession.special}
        id={scoringSession.id}
        teamEvent={scoringSession.eventType === 'team'}
      />
    </div>

    {
      scoringSession.eventType === 'team' && (
        <div
          class="pb-30 p-6 absolute bottom-0 w-full items-center justify-center"
          x-data="{ open: false }"
        >
          <form
            hx-post={`/scoring/${id}/beersandciders`}
            x-show="open"
            x-cloak
            hx-indicator="body"
            hx-swap="none"
            @htmx:after-request="open = false"
          >
            <table class="w-full">
              <thead class="w-full uppercase bg-cyan-950 text-white">
                <tr>
                  <th class="p-2 pl-4 text-left vcr w-[36%]">Spelare</th>
                  <th>Ã–l</th>
                  <th>Cider</th>
                </tr>
              </thead>
              <tbody>
                {players.map((player) => (
                  <tr
                    class="border-b border-gray-200 odd:bg-white even:bg-gray-50"
                    x-data={`{beers: ${player.beers}, ciders: ${player.ciders}}`}
                  >
                    <td class="p-4">{shortName(player.player.fullName)}</td>
                    <td class="w-40">
                      <div class="p-4">
                        <input
                          name={`player[${player.scorecardId}][${player.playerId}][beers]`}
                          x-model="beers"
                          class="sr-only"
                        />
                        <div class="flex items-center justify-between gap-0">
                          <Button
                            size="sm"
                            intent="inline"
                            @click="beers--"
                            x-bind:disabled="beers === 0"
                          >
                            &minus;
                          </Button>
                          <h3 x-text="beers" class="w-10 text-center text-2xl" />
                          <Button size="sm" intent="inline" @click="beers++">
                            {' '}
                            &plus;{' '}
                          </Button>
                        </div>
                      </div>
                    </td>
                    <td class="w-40">
                      <div class="p-4">
                        <input
                          name={`player[${player.scorecardId}][${player.playerId}][ciders]`}
                          x-model="ciders"
                          class="sr-only"
                        />
                        <div class="flex items-center justify-between gap-0">
                          <Button
                            size="sm"
                            intent="inline"
                            @click="ciders--"
                            x-bind:disabled="ciders === 0"
                          >
                            &minus;
                          </Button>
                          <h3 x-text="ciders" class="w-10 text-center text-2xl" />
                          <Button size="sm" intent="inline" @click="ciders++">
                            {' '}
                            &plus;{' '}
                          </Button>
                        </div>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            <div class="w-full text-center">
              <Button type="submit" class="mx-auto mt-4">
                SPARA Ã–L & CIDER
              </Button>
            </div>
          </form>
          <Button class="ml-4 mb-4 mx-auto" x-on:click="open = ! open" x-show="!open">
            Ã–L & CIDER
          </Button>
        </div>
      )
    }

    <div class="fixed bottom-20 w-full">
      <button
        :disabled="!prev"
        @click="scrollPrev()"
        class="embla__button embla__button--prev"
        type="button"
      >
        <svg class="embla__button__svg" viewBox="137.718 -1.001 366.563 643.999">
          <path
            d="M428.36 12.5c16.67-16.67 43.76-16.67 60.42 0 16.67 16.67 16.67 43.76 0 60.42L241.7 320c148.25 148.24 230.61 230.6 247.08 247.08 16.67 16.66 16.67 43.75 0 60.42-16.67 16.66-43.76 16.67-60.42 0-27.72-27.71-249.45-249.37-277.16-277.08a42.308 42.308 0 0 1-12.48-30.34c0-11.1 4.1-22.05 12.48-30.42C206.63 234.23 400.64 40.21 428.36 12.5z"
          ></path>
        </svg>
      </button>
      <button
        :disabled="!next"
        @click="scrollNext()"
        class="embla__button embla__button--next"
        type="button"
      >
        <svg class="embla__button__svg" viewBox="0 0 238.003 238.003">
          <path
            d="M181.776 107.719L78.705 4.648c-6.198-6.198-16.273-6.198-22.47 0s-6.198 16.273 0 22.47l91.883 91.883-91.883 91.883c-6.198 6.198-6.198 16.273 0 22.47s16.273 6.198 22.47 0l103.071-103.039a15.741 15.741 0 0 0 4.64-11.283c0-4.13-1.526-8.199-4.64-11.313z"
          ></path>
        </svg>
      </button>
    </div>
  </div>
  <Fragment slot="footer-left">
    <div class="flex gap-2">
      <Button intent="link" size="sm">
        <a href={`/scoring/${id}/menu`}>MENY</a>
      </Button>
    </div>
  </Fragment>
  <Fragment slot="footer-right">
    <Button intent="link" size="sm">
      <a href={`/scoring/${id}/leaderboard`}>LEDARTAVLA</a>
    </Button>
  </Fragment>
</AppScreen>

<script src="src/assets/alpine/ScoringController.ts"></script>
