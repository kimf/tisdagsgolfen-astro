---
export const prerender = false;
import 'src/styles/newscoringsession.css';
import Layout from 'src/layouts/Layout.astro';
import db from 'src/db';
import { scoringSessions, scorecardPlayers, scorecards } from 'src/db/schema';
import { extractPlayers, extractTeams } from 'src/utils/formDataExtractors';

import Settings from 'src/components/newscoringsession/Settings.astro';
import CourseSelector from 'src/components/newscoringsession/CourseSelector.astro';
import TeamSetup from 'src/components/newscoringsession/TeamSetup.astro';
import PlayerSetup from 'src/components/newscoringsession/PlayerSetup.astro';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const userId = await Astro.session?.get('userId');

    if (!userId) {
      throw new Error('Logga in fÃ¶r att skapa scoringSession');
    }

    const isSpecial = formData.get('specialweek') === 'on';
    const isTeamEvent = isSpecial && formData.get('teamevent') === 'on';
    const isStrokes = formData.get('strokes') === 'on';
    const courseId = Number(formData.get('course'));

    let createdScoringSessionId: number;
    await db.transaction(async (tx) => {
      const scoringSesh = await tx
        .insert(scoringSessions)
        .values({
          ownerId: Number(userId),
          courseId,
          special: isSpecial ? 1 : 0,
          strokes: isStrokes ? 1 : 0,
          teamEvent: isTeamEvent ? 1 : 0
        })
        .returning({ id: scoringSessions.id });

      createdScoringSessionId = scoringSesh[0].id;

      // Prepare all scorecards
      let scorecardValues: {
        courseId: number;
        scoringSessionId: number;
        givenStrokes: number;
        playerIds: string[];
        teamIndex?: number;
      }[];

      if (isTeamEvent) {
        const teams = extractTeams(formData);
        if (!teams) {
          tx.rollback();
          throw new Error('No teams');
        }
        scorecardValues = teams.map((team, index) => ({
          courseId: courseId,
          scoringSessionId: createdScoringSessionId,
          givenStrokes: Number(team.strokes) || 0,
          teamIndex: index,
          playerIds: team.players
        }));
      } else {
        const players = extractPlayers(formData);
        if (!players) {
          tx.rollback();
          throw new Error('No players posted');
        }
        scorecardValues = players.map((player) => ({
          courseId: courseId,
          scoringSessionId: createdScoringSessionId,
          givenStrokes: Number(player.strokes) || 0,
          playerIds: [player.id]
        }));
      }

      // Batch insert scorecards
      const scorecardsInserted = await tx
        .insert(scorecards)
        .values(scorecardValues)
        .returning({ id: scorecards.id });

      const scorecardPlayerValues: { scorecardId: number; playerId: number }[] = [];
      scorecardValues.forEach((scorecard, idx) => {
        for (const playerId of scorecard.playerIds) {
          scorecardPlayerValues.push({
            scorecardId: scorecardsInserted[idx].id,
            playerId: Number(playerId)
          });
        }
      });

      await tx.insert(scorecardPlayers).values(scorecardPlayerValues);
    });

    return Astro.redirect(`/scoring/${createdScoringSessionId}`);
  } catch (e) {
    console.warn(e);
  }
}

const allPlayers = await db.query.profiles.findMany({
  where: (players, { eq }) => eq(players.active, 1)
});

const joinId = Astro.url.searchParams.get('joinId') || '';
let joinSession = null;
if (joinId) {
  joinSession = await db.query.scoringSessions.findFirst({
    where: (sessions, { eq }) => eq(sessions.id, Number(joinId))
  });
}
---

<Layout title="Ny Runda">
  <form
    method="POST"
    x-data={`teamForm(${joinSession?.courseId}, ${joinSession?.special}, ${joinSession?.teamEvent}, ${joinSession?.strokes})`}
  >
    <Settings />
    <CourseSelector />
    <TeamSetup allPlayers={allPlayers} />
    <PlayerSetup allPlayers={allPlayers} />
    <button type="submit" style="margin-top: 2rem;" :disabled="disableSave">SPELA GOLF</button>
  </form>
</Layout>
<script src="src/controllers/NewScoringSessionController.ts"></script>
